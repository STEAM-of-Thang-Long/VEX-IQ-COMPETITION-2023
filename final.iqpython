{"mode":"Text","textContent":"# SOTL VEX IQ COMPETITION 2-2023\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_motor = Motor(Ports.PORT1, False)\nright_motor = Motor(Ports.PORT6, True)\nclaw_motor = Motor(Ports.PORT4, False)\narm_motor = Motor(Ports.PORT10, True)\ncontroller = Controller()\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------------------------------------------\n#\n#    Project:           Controller Buttons\n#    Description:       This program shows two different ways of\n#                       controlling robot behavior using Controller buttons.\n#    Brain Supported:   2nd generation\n#    Configuration:     Controller\n#                       Left Motor in Port 1\n#                       Right Motor in Port 6\n#                       Claw Motor in Port 4\n#                       Arm Motor in Port 10\n#\n# ------------------------------------------------------------------------------\n\n# Library imports\nfrom vex import *\nfloat myVariable, deadBand;\ndeadBand = 5;\n\n# Begin project code\n# Callback function when Controller buttonLUp is pressed\ndef on_L_up_pressed():\n\n    # Spinning the arm_motor forward raises the arm\n    arm_motor.spin(FORWARD)\n\n    while controller.buttonLUp.pressing():\n        # Wait until Controller ButtonLUp is released\n        wait(20, MSEC)\n\n    arm_motor.stop()\n\n\n# Callback function when Controller buttonLDown is pressed\ndef on_L_down_pressed():\n\n    # Spinning the arm_motor in reverse lowers the arm\n    arm_motor.spin(REVERSE)\n\n    while controller.buttonLDown.pressing():\n        # Wait until Controller ButtonLDown is released\n        wait(20, MSEC)\n\n    arm_motor.stop()\n\n\n# Register event handlers and pass callback functions\ncontroller.buttonLUp.pressed(on_L_up_pressed)\ncontroller.buttonLDown.pressed(on_L_down_pressed)\n\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\n# Set default motor stopping behavior and velocity\narm_motor.set_stopping(HOLD)\nclaw_motor.set_stopping(HOLD)\narm_motor.set_velocity(60, PERCENT)\nclaw_motor.set_velocity(30, PERCENT)\n\n# Loop to keep checking for Controller R Up and R Down button presses\nwhile True:\n    if controller.buttonRUp.pressing():\n        # Spinning the claw_motor forward closes the claw\n        claw_motor.spin(FORWARD)\n    elif controller.buttonRDown.pressing():\n        # Spinning the claw_motor in reverse opens the claw\n        claw_motor.spin(REVERSE)\n    else:\n        # Stop the claw_motor if buttonRUp is not pressed\n        claw_motor.stop()\n        axis_a_pos = controller.axisA.position()\n    axis_c_pos = controller.axisC.position()\n\n    if abs(axis_a_pos) + abs(axis_c_pos) > dead_band:\n        left_motor.set_velocity((axis_a_pos + axis_c_pos), PERCENT)\n        right_motor.set_velocity((axis_a_pos - axis_c_pos), PERCENT)\n    else:\n        left_motor.set_velocity(0, PERCENT)\n        right_motor.set_velocity(0, PERCENT)\n    left_motor.spin(FORWARD)\n    right_motor.spin(FORWARD)\n    wait(1, MSEC)\n\n'''float myVariable, deadBand;\n\n// \"when started\" hat block\nint whenStarted1() {\n  deadBand = 5.0;\n  while (true) {\n    if (fabs(static_cast<float>(Controller.AxisA.position())) + fabs(static_cast<float>(Controller.AxisC.position())) > deadBand) {\n      LeftMotor.setVelocity((Controller.AxisA.position() + Controller.AxisC.position()), percent);\n      RightMotor.setVelocity((Controller.AxisA.position() - Controller.AxisC.position()), percent);\n    }\n    else {\n      LeftMotor.setVelocity(0.0, percent);\n      RightMotor.setVelocity(0.0, percent);\n    }\n    LeftMotor.spin(forward);\n    RightMotor.spin(forward);\n  wait(20, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  whenStarted1();\n} '''\n","textLanguage":"python","rconfig":[{"port":[1],"name":"left_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[6],"name":"right_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":true,"fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[4],"name":"claw_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"fwd":"close","rev":"open","reversed":"false"},"triportSourcePort":22},{"port":[10],"name":"arm_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"up","rev":"down"},"triportSourcePort":22},{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","drive":"none"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.4","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","target":"Physical"}